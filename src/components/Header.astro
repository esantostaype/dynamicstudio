---
const { pathname } = Astro.url
import NavMobile from '@/components/NavMobile.astro'
import ClientsZoneButton from '@/components/ui/ClientsZoneButton.astro'
import type { Nav } from '@/interfaces'
const normalizedPathName =
	pathname.length > 1 && pathname.endsWith("/") ? pathname.slice(0, -1) : pathname

const nav: Nav[] = [
  { label: "Home", path: "/" },
  { label: "Services", path: "/services", active: normalizedPathName.startsWith("/services") },
  { label: "Projects", path: "/projects", active: normalizedPathName.startsWith("/projects") },
  { label: "About Us", path: "/about-us" },
  { label: "Contact Us", path: "#contact", isScrollLink: true } // Modified to be a scroll link
].map((item) => ({
	...item,
	active: item.active ?? normalizedPathName === item.path
}))
--- 

<header class="flex fixed items-center justify-between left-0 px-5 py-4 xl:py-0 top-0 w-full z-[99999] transition-all duration-1000 border-b-transparent">
  <a href="/"><img src="/images/logo.svg" width="220" height="32" alt="Dynamic Studio"></a>
  <nav class="xl:flex gap-4 hidden uppercase text-sm font-normal tracking-wide">
    { nav.map(({ label, path, active, isScrollLink }) => (
      <a 
        class={`hover:text-dynamicGreen py-8 px-4 relative transition-all duration-300 ${ active ? "text-dynamicGreen" : "" }`} 
        href={ path }
        data-scroll-to={ isScrollLink ? path.replace('#', '') : null }
      >
        { label }
        { active && <span class="absolute left-0 top-0 w-full h-[2px] bg-dynamicGreen" transition:name="active"></span> }
      </a>
      ))
    }
  </nav>
  <div class="hidden xl:block"><ClientsZoneButton/></div>
  <NavMobile nav={ nav }/>
</header>

<script>
  import LocomotiveScroll from 'locomotive-scroll'

  document.addEventListener("astro:page-load", () => {
    const header = document.querySelector("header") as HTMLElement
    const scroll = new LocomotiveScroll({
      el: document.querySelector("[data-scroll-container]") as HTMLElement,
      smooth: true
    })

    // Scroll event handling remains the same
    scroll.on("scroll", ({ scroll }) => {
      if (scroll.y >= 50) {
        header.classList.add("onScroll")
      } else {
        header.classList.remove("onScroll")
      }
    })

    // Add click event listener for scroll links
    document.querySelectorAll('a[data-scroll-to]').forEach(link => {
      link.addEventListener('click', (e) => {
        const target = link.getAttribute('data-scroll-to')
        if (target) {
          e.preventDefault()
          const contactSection = document.getElementById(target)
          if (contactSection) {
            scroll.scrollTo(contactSection)
          }
        }
      })
    })
  })
</script>

<style>
  .onScroll {
    background-color: rgba(10, 10, 32, 0.8);
    backdrop-filter: blur(32px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
</style>