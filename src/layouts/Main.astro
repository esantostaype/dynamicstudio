---
const { pathname } = Astro.url
import Footer from '@/components/Footer.astro'
import Head from '@/components/Head.astro'
import Header from '@/components/Header.astro'
import ChatButton from '@/components/ui/ChatButton.astro'
import  SpeedInsights  from "@vercel/speed-insights/astro"
interface Props {
	title?: string
	description?: string
	image?: string
}
const { title, description, image } = Astro.props
---

<!doctype html>
<html lang="en">
	<Head title=`${ title } | Dynamic Studio` description={ description } image={ image } />
	<body data-scroll-container>
		<Header/>
		<main data-scroll-section>
			<slot/>
			<Footer/>
		</main>
		<ChatButton/>
		<SpeedInsights/>
	</body>
</html>

<style is:global>
	@import '@/styles/main.css';
</style>

<script>

import LocomotiveScroll from 'locomotive-scroll'
import { MasonryGrid } from '@/scripts/masonry'
import { RevealFade, RevealLeft, RevealUp } from '@/scripts/reveal'

interface ScrollInstance {
  destroy: () => void
}

let locomotiveScroll: ScrollInstance | null = null

const initScroll = (): void => {
  if ( locomotiveScroll ) {
    locomotiveScroll.destroy()
  }

  window.scrollTo(0, 0)

  const revealUp = new RevealUp()
  revealUp.observe()
  const revealLeft = new RevealLeft()
  revealLeft.observe()
  const revealFade = new RevealFade()
  revealFade.observe()

  locomotiveScroll = new LocomotiveScroll
}

const handleHeaderScroll = (): void => {
  const header = document.querySelector('header')
  if (!header) return

  const add_class_on_scroll = (): void => header.classList.add("onScroll")
  const remove_class_on_scroll = (): void => header.classList.remove("onScroll")

  const scrollHandler = (): void => {
    const scrollpos = window.scrollY
    if (scrollpos >= header.offsetHeight) {
      add_class_on_scroll()
    } else {
      remove_class_on_scroll()
    }
  }

  window.addEventListener('scroll', scrollHandler)
}

document.addEventListener("astro:page-load", () => {
  initScroll()
  handleHeaderScroll()

  const container = document.querySelector('.masonry-container');
  if (container instanceof HTMLElement) {
    const masonry = new MasonryGrid(container, {
      defaultColumns: 2,  // Configuraci√≥n por defecto para pantallas grandes
      defaultGap: 40,
      breakpoints: [        
        {
          width: 768,    // Para pantallas <= 768px
          columns: 2,
          gap: 20
        },
        {
          width: 400,    // Para pantallas <= 768px
          columns: 1,
          gap: 30
        }
      ]
    });
  }
})

document.addEventListener("astro:before-preparation", () => {
  if (locomotiveScroll) {
    locomotiveScroll.destroy()
    locomotiveScroll = null
  }
})

</script>